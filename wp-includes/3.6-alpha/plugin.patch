--- C:\apache\htdocs\wordpress\wp-content\plugins\oik-bwtrace\wp-includes\3.6-alpha\plugin.php	2012-12-20 15:49:56.000000000 -0000
+++ C:\apache\htdocs\wordpress\wp-content\plugins\oik-bwtrace\wp-includes\3.6-alpha\plugin.act	2013-03-07 17:33:20.000000000 -0000
@@ -65,12 +65,15 @@
 function add_filter($tag, $function_to_add, $priority = 10, $accepted_args = 1) {
 	global $wp_filter, $merged_filters;
 
 	$idx = _wp_filter_build_unique_id($tag, $function_to_add, $priority);
 	$wp_filter[$tag][$priority][$idx] = array('function' => $function_to_add, 'accepted_args' => $accepted_args);
 	unset( $merged_filters[ $tag ] );
+        
+        if ( function_exists( "bw_call_lazy_trace_actions" ) )
+          bw_call_lazy_trace_actions( $tag, $wp_filter[$tag] );
 	return true;
 }
 
 /**
  * Check if any filter has been registered for a hook.
  *
@@ -99,13 +102,34 @@
 	foreach ( (array) array_keys($wp_filter[$tag]) as $priority ) {
 		if ( isset($wp_filter[$tag][$priority][$idx]) )
 			return $priority;
 	}
 
 	return false;
-}
+}
+
+/**
+ * Trace the fact that an action has been invoked without our prior knowledge of the possibility
+ * 
+ * @param string $function - pass __FUNCTION__
+ * @param string $storend - start or end action code. Use "<I" for immediate start and ">I" for immediate end
+ * @param mixed $arg1-5 - up to 5 args - the first has to be returned when the action is a filter
+ * @return mixed $arg1
+ * @uses bw_lazy_trace_action_immediate()
+ * Notes: 
+ * 
+ */
+if ( !function_exists( "bw_trace_action_immediate" ) ) {
+function bw_trace_action_immediate( $function, $storend="I!", $arg1=null, $arg2=null, $arg3=null, $arg4=null, $arg5=null ) {
+  if ( function_exists( "bw_lazy_trace_action_immediate" ) ) {
+    return( bw_lazy_trace_action_immediate( $function, $storend, $arg1, $arg2, $arg3, $arg4, $arg5 ) );
+  } else {
+    return( $arg1 );
+  }
+}
+}    
 
 /**
  * Call the functions added to a filter hook.
  *
  * The callback functions attached to filter hook $tag are invoked by calling
  * this function. This function can be used to create a new filter hook by
@@ -133,12 +157,13 @@
  * @param mixed $value The value on which the filters hooked to <tt>$tag</tt> are applied on.
  * @param mixed $var,... Additional variables passed to the functions hooked to <tt>$tag</tt>.
  * @return mixed The filtered value after all hooked functions are applied to it.
  */
 function apply_filters($tag, $value) {
 	global $wp_filter, $merged_filters, $wp_current_filter;
+        bw_trace_action_immediate( __FUNCTION__, "<I", $tag, $value );
 
 	$args = array();
 
 	// Do 'all' actions first
 	if ( isset($wp_filter['all']) ) {
 		$wp_current_filter[] = $tag;
@@ -173,12 +198,14 @@
 				$value = call_user_func_array($the_['function'], array_slice($args, 1, (int) $the_['accepted_args']));
 			}
 
 	} while ( next($wp_filter[$tag]) !== false );
 
 	array_pop( $wp_current_filter );
+        
+        bw_trace_action_immediate( __FUNCTION__, "I>", $tag, $value );
 
 	return $value;
 }
 
 /**
  * Execute functions hooked on a specific filter hook, specifying arguments in an array.
@@ -196,12 +223,14 @@
  * @param string $tag The name of the filter hook.
  * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt>
  * @return mixed The filtered value after all hooked functions are applied to it.
  */
 function apply_filters_ref_array($tag, $args) {
 	global $wp_filter, $merged_filters, $wp_current_filter;
+        
+        bw_trace_action_immediate( __FUNCTION__, "<I",  $tag, $args );
 
 	// Do 'all' actions first
 	if ( isset($wp_filter['all']) ) {
 		$wp_current_filter[] = $tag;
 		$all_args = func_get_args();
 		_wp_call_all_hook($all_args);
@@ -229,12 +258,14 @@
 			if ( !is_null($the_['function']) )
 				$args[0] = call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
 
 	} while ( next($wp_filter[$tag]) !== false );
 
 	array_pop( $wp_current_filter );
+        
+        bw_trace_action_immediate( __FUNCTION__, "I>",  $tag, $args );
 
 	return $args[0];
 }
 
 /**
  * Removes a function from a specified filter hook.
@@ -356,12 +387,13 @@
  * @param string $tag The name of the action to be executed.
  * @param mixed $arg,... Optional additional arguments which are passed on to the functions hooked to the action.
  * @return null Will return null if $tag does not exist in $wp_filter array
  */
 function do_action($tag, $arg = '') {
 	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;
+        bw_trace_action_immediate( __FUNCTION__, "<I", $tag, $arg );
 
 	if ( ! isset($wp_actions) )
 		$wp_actions = array();
 
 	if ( ! isset($wp_actions[$tag]) )
 		$wp_actions[$tag] = 1;
@@ -405,12 +437,14 @@
 			if ( !is_null($the_['function']) )
 				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
 
 	} while ( next($wp_filter[$tag]) !== false );
 
 	array_pop($wp_current_filter);
+        
+        bw_trace_action_immediate( __FUNCTION__, "I>",  $tag, $args );
 }
 
 /**
  * Retrieve the number of times an action is fired.
  *
  * @package WordPress
@@ -445,12 +479,13 @@
  * @param string $tag The name of the action to be executed.
  * @param array $args The arguments supplied to the functions hooked to <tt>$tag</tt>
  * @return null Will return null if $tag does not exist in $wp_filter array
  */
 function do_action_ref_array($tag, $args) {
 	global $wp_filter, $wp_actions, $merged_filters, $wp_current_filter;
+        bw_trace_action_immediate( __FUNCTION__, "<I", $tag, $args );
 
 	if ( ! isset($wp_actions) )
 		$wp_actions = array();
 
 	if ( ! isset($wp_actions[$tag]) )
 		$wp_actions[$tag] = 1;
@@ -486,12 +521,14 @@
 			if ( !is_null($the_['function']) )
 				call_user_func_array($the_['function'], array_slice($args, 0, (int) $the_['accepted_args']));
 
 	} while ( next($wp_filter[$tag]) !== false );
 
 	array_pop($wp_current_filter);
+        
+        bw_trace_action_immediate( __FUNCTION__, "I>",  $tag, $args );
 }
 
 /**
  * Check if any action has been registered for a hook.
  *
  * @package WordPress
